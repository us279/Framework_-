#!/usr/bin/env python3
"""
Plot roofline diagrams for Fortran FEM simulations at different precision levels.
This script reads roofline CSV files generated by the Fortran codes with the 
roofline_counter module and creates roofline visualizations.
"""

import os
import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

BASE_DIR = os.path.dirname(__file__)
DATA_DIR = os.path.join(BASE_DIR, "csv outputs")
OUTPUT_DIR = "plot_outputs"

# Color scheme for different precision levels (matching plot_results.py)
COLORS = {
    'FP16': '#FF5733',  # Orange-red
    'FP32': '#33A8FF',  # Light blue
    'FP64': '#4CAF50',  # Green
    'FP128': '#9C27B0', # Purple
}

def ensure_output_dir():
    """Create output directory if it doesn't exist."""
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
        print(f"Created output directory: {OUTPUT_DIR}")
    else:
        print(f"Using existing output directory: {OUTPUT_DIR}")

def read_roofline(eq_type, precision):
    """
    Read the roofline CSV file for a specific equation type and precision.
    Returns (flops, bytes, runtime_s) or None if the file doesn't exist.
    """
    fn = os.path.join(DATA_DIR, f"{eq_type}_{precision}_roofline.csv")
    if not os.path.exists(fn):
        return None
    
    try:
        # df = pd.read_csv(fn)
        df = pd.read_csv(fn, sep=r'[,\s]+', engine='python')
        return df.loc[0,'flops'], df.loc[0,'bytes'], df.loc[0,'runtime_s']
    except Exception as e:
        print(f"Error reading {fn}: {e}")
        return None

def plot_roofline(eq_type, precision_list):
    """
    Create a roofline plot for a given equation type across different precisions.
    
    Args:
        eq_type: String with equation type ('advection', 'burgers', or 'heat')
        precision_list: List of precision levels ('FP16', 'FP32', 'FP64', 'FP128')
    """
    # Hardware peak values (adjust for your system)
    peak_bw    = 63.0          # GB/s  ← Apple M-series example
    peak_flops = 900.0         # GFLOP/s (FP64) single core

    xs, ys, labels = [], [], []
    for prec in precision_list:
        r = read_roofline(eq_type, prec)
        if r:
            flops, bytes_, runtime = r
            ai  = flops / bytes_
            perf = flops / runtime / 1e9
            xs.append(ai); ys.append(perf); labels.append(prec)

    if not xs: 
        print(f"No roofline data found for {eq_type}")
        return

    ix = np.logspace(-3, 3, 200)
    iy = np.minimum(peak_flops, peak_bw*ix)

    plt.figure(figsize=(7,5))
    plt.loglog(ix, iy, 'k-', lw=2)
    plt.scatter(xs, ys, s=80, c=[COLORS[p] for p in labels])
    for x,y,l in zip(xs,ys,labels):
        plt.text(x*1.1, y*1.1, l)

    plt.xlabel('Arithmetic intensity [FLOPs/byte]')
    plt.ylabel('Performance [GFLOP/s]')
    plt.title(f'Roofline – {eq_type.capitalize()}')
    plt.grid(True, which='both', ls=':')
    plt.ylim(1e-2, peak_flops*1.2)
    plt.xlim(ix[0], ix[-1])

    out = os.path.join(OUTPUT_DIR, f"{eq_type}_roofline.png")
    plt.savefig(out, dpi=300, bbox_inches='tight')
    plt.close()
    print(f'   ↳ saved roofline → {out}')

def main():
    """Main function to create roofline plots for all equation types."""
    print("PDE Finite Element Method - Roofline Visualization")
    print("=" * 50)
    
    # Ensure output directory exists
    ensure_output_dir()
    
    # Check which files exist
    equation_types = ['advection', 'burgers', 'heat']
    precision_levels = ['FP16', 'FP32', 'FP64', 'FP128']
    
    for eq_type in equation_types:
        print(f"\nProcessing {eq_type.capitalize()} equation roofline:")
        
        # Find available precision levels with roofline data
        available_precision = []
        for prec in precision_levels:
            if os.path.exists(os.path.join(DATA_DIR, f"{eq_type}_{prec}_roofline.csv")):
                available_precision.append(prec)
                print(f"  - Found roofline data for {prec} precision")
        
        if available_precision:
            print(f"  - Creating roofline plot...")
            try:
                plot_roofline(eq_type, available_precision)
            except Exception as e:
                print(f"    Error creating roofline plot: {e}")
        else:
            print(f"  - No roofline data found for {eq_type} equation")
    
    print("\nRoofline visualization complete. Check the output files in the '{}' directory.".format(OUTPUT_DIR))

if __name__ == "__main__":
    main()